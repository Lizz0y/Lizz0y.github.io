---
layout:     post
title:      "Slab"
date:       2017-03-17
author:     "Liz"
header-img: "img/2017-02-01-binder/pic.jpeg"
tags:
    - Linux
    - SourceCode
---

### 内核缓冲区(slab)

此篇主要介绍在内核中,`linux`如何提高数据结构分配效率。

#### malloc缺点

一般C程序员很喜欢使用`malloc`来分配内存,但会有以下缺陷:

* 久而久之会使存储堆碎片化
* 每次分配到缓冲区后都要初始化,释放的数据结构在下次分配时又要重新初始化,性能较差

而这两点使它不适合作为内核内存的分配策略,举个栗子,内核经常会创建进程销毁进程,那`task_struct`这个结构就会经常被分配销毁,如果每次都要重新`malloc`并进行初始化会比较耗时,因此`linux`引入`slab`概念。

#### slab
每种数据结构都有自己专用的缓冲区队列

##### 小对象

`slab`可以拥有`1<<n`个页面,并且在一个页面可以容纳好几个对象。下图是它的定义:

![](/img/2017-03-17-slab/14895923041017.jpg)

* `list`:将一块`slab`链入一个专用缓冲区队列
* `colouroff`:着色区大小 使得`slab`中每个对象的起始地址都按缓冲行对齐
* `s_mem`:指向对象区的起点
* `free`:指向第一个空闲对象,每个空闲对象都会指向下一个空闲对象的序号

在该机制中,同一个数据结构例如`inode`会维护属于自己的`slab`队列,同时还会有三条独立的链表,分别是:

1. `slab`中所有对象都被分配队列 `all`
2. `slab`中所有对象均未被分配队列
3. `slab`中部分对象被分配 `partial`

所以某个`slab`在某个时刻除了会在一条特定对象的队列中外,还会在上述链表中的某一条上。

![](/img/2017-03-17-slab/14896722439739.jpg)


* 对象区存储该slab区的对象组
* 为了使对象与高速缓冲区对齐,增加着色区
* 对象链接数组是一个空闲对象链,数组中的值存储下一个空闲对象的`index`

同时,`linux`引入两层结构:
`kmem_cache_t`结构是一个总结性的头部,维护第一层`slab`队列,这个队列都是`kmem_cache_t`结构,在该结构中,还有对应对象的构造函数(`ctor`)和析构函数(`dtor`)
第二层结构:`kmem_cache_t`作为队列头,维护第二层`slab`,第二层是某种特定对象的队列,并且第二层`slab`会维护一个空闲对象队列,即前面的`free`变量

![](/img/2017-03-17-slab/14896636548003.jpg)


着色区使同一`slab`队列不同`slab`上对象区的起始地址错开

#### `slab_cache`

不常用的对象`cache`数组,只是对象大小不同,因为没必要为它专门搞一个队列。

`kmalloc`:分配一个不具有专门`slab`结构,又不想用`page`,否则使用`alloc_page`即可。
`kfreee`

![](/img/2017-03-17-slab/14896643007090.jpg)



#### kmem_cache_create()

![](/img/2017-03-17-slab/14896649630305.jpg)


`size`:对象(缓冲区)大小
`offset`:第一个对象在slab中的偏移

该函数主要创造该对象对应的`kmem_cache_t`,做了一个准备工作,并没有真正的创建`slab`

#### kmem_cache_alloc()

![](/img/2017-03-17-slab/14896651308601.jpg)



可以看到,没有包含空闲对象的`slab`，则`alloc_new_slab`,否则`kmem_cache_alloc_one_tail`分配一个空闲的对象:
* `slab_t->free*objsize + slab_t->s_mem`拿到第一个空闲的对象地址
* 更新`slab_t->free` 为下一个空闲对象`index `

#### kmem_cache_grow()

在`alloc_new_slab`中进入该函数:

![](/img/2017-03-17-slab/14896738239883.jpg)


* 首先根据`gfporder`即`slab`应有的`page number`来`alloc_page`,这里分配得到`objp` 注意是缓冲区(`obj`)的`mem`
* 然后通过`kmem_cache_slabmgmt()`建立管理信息，即确定`slab_t`结构的各个变量值
* 通过`kmem_cache_init_objs`进行构造函数对象初始化

#### `kmem_cache_free`

释放缓冲区,可以根据释放对象的地址计算出所在页面,根据页面得到对象所在的`slab`指针(之前`alloc`的时候有设置过),然后就可以释放该对象,同时更新`free`

![](/img/2017-03-17-slab/14896743034777.jpg)

很巧妙,把刚释放的对象`index`设为`slabp->free`,即插入`free`的头部。

![](/img/2017-03-17-slab/14896743331730.jpg)

更新三条链表,缓冲区的释放并不导致`slab`的释放,`slab`释放由`kswapd`等内核线程调用`kmem_cache_reap()`完成

